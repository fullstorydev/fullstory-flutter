group = "com.example.fullstory_flutter"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "1.8.22"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.1.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

repositories {
    google()
    mavenCentral()
    mavenLocal()
    maven { url "https://maven.fullstory.com" }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    if (project.android.hasProperty("namespace")) {
        namespace = "com.example.fullstory_flutter"
    }

    compileSdk = 34

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
    }

    // Determine the version of FS to compile against
    String fsVersion
    if (isModuleProject(project)) {
        if (project.hasProperty('fsTarget')) {
            String fsTargetStr = project.getProperty('fsTarget')
            FSVersion targetVersion = parseVersion(fsTargetStr)
            if (targetVersion == null) {
                throw new GradleException("Failed to parse `fsTarget` version: $fsTargetStr")
            }
            validateVersion(targetVersion)
            fsVersion = targetVersion
        } else {
            fsVersion = FSConstants.MIN_FS_VERSION
        }
    } else {
        FSVersion version = getFSVersionFromBuildScript(project)
        validateVersion(version)
        fsVersion = version.toString()
    }

    dependencies {
        testImplementation "org.powermock:powermock-module-junit4:2.0.2"
        testImplementation "org.powermock:powermock-api-mockito2:2.0.9"
        testImplementation "junit:junit:4.13.2"

        compileOnly "com.fullstory:instrumentation-full:$fsVersion@aar"
    }

    testOptions {
        unitTests.all {
            useJUnit()
            jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}

private static boolean isModuleProject(Project project) {
    Project flutterProject = project.rootProject.findProject(":flutter")
    if (flutterProject != null) {
        def modulePlugins = flutterProject.plugins
        return modulePlugins.hasPlugin(FSConstants.FLUTTER_GRADLE_PLUGIN_ID)\
            && modulePlugins.hasPlugin(FSConstants.ANDROID_LIBRARY_PLUGIN_ID)
    }
    return false
}

private static FSVersion getFSVersionFromBuildScript(Project project) {
    def rootScriptClassPathFiles = project.rootProject.buildscript.getScriptClassPath().getAsFiles()
    String searchString = 'gradle-plugin-local-'
    for (File file : rootScriptClassPathFiles) {
        int lastIndex = file.name.lastIndexOf(searchString)
        if (lastIndex < 0) {
            continue
        }

        if (!file.name.endsWith('.jar')) {
            continue
        }

        int endIndex = file.name.length() - 4
        int startIndex = lastIndex + searchString.length()
        return parseVersion(file.name.substring(startIndex, endIndex))
    }
    return null
}

private static FSVersion parseVersion(String versionStr) {
    def versionRegex = /(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)/
    def match = versionStr =~ versionRegex
    if (match.matches()) {
        def major = match.group('major') as Integer
        def minor = match.group('minor') as Integer
        def patch = match.group('patch') as Integer
        return new FSVersion(major, minor, patch)
    } else {
        return null
    }
}

private static void validateVersion(FSVersion version) {
    if (version == null) {
        throw new GradleException('Unable to determine Fullstory version, please verify your project is properly '
            + 'configured to use the Fullstory plugin: '
            + 'https://help.fullstory.com/hc/en-us/articles/360040596093-Getting-Started-with-Android-Data-Capture')
    }
    if (version.isLessThan(FSConstants.MIN_FS_VERSION)) {
        throw new GradleException("Fullstory SDK version ${FSConstants.MIN_FS_VERSION} or later is required, but "
            + "version $version was detected. Please update to a newer version of Fullstory.")
    }
}

class FSVersion {
    public final int major
    public final int minor
    public final int patch

    FSVersion(int major, int minor, int patch) {
        this.major = major
        this.minor = minor
        this.patch = patch
    }

    boolean isLessThan(FSVersion other) {
        if (major != other.major) {
            return major < other.major
        }
        if (minor != other.minor) {
            return minor < other.minor
        }
        return patch < other.patch
    }

    @Override
    String toString() {
        return "$major.$minor.$patch"
    }
}

class FSConstants {
    static final FLUTTER_GRADLE_PLUGIN_ID = "dev.flutter.flutter-gradle-plugin"
    static final ANDROID_LIBRARY_PLUGIN_ID = "com.android.library"
    static final MIN_FS_VERSION = new FSVersion(1, 54, 0)
}
