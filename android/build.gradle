group = "com.example.fullstory_flutter"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "1.8.22"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.1.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven { url "https://maven.fullstory.com" }
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    if (project.android.hasProperty("namespace")) {
        namespace = "com.example.fullstory_flutter"
    }

    compileSdk = 34

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
    }

    // determine FS version app is using
    // based on https://github.com/fullstorydev/fullstory-react-native/blob/4af1ab9c040cb647fb0f0afe25df42b986fd11de/android/build.gradle#L55-L96
    def rootScriptClassPathFiles = rootProject.buildscript.getScriptClassPath().getAsFiles()
    String searchString = 'gradle-plugin-local-'
    String fsDetectedVersion = null
    for (File file : rootScriptClassPathFiles) {
        int lastIndex = file.name.lastIndexOf(searchString)
        if (lastIndex < 0) {
            continue
        }

        if (!file.name.endsWith('.jar')) {
            continue
        }

        int endIndex = file.name.length() - 4
        int startIndex = lastIndex + searchString.length()
        fsDetectedVersion = file.name.substring(startIndex, endIndex)
        break
    }

    if (fsDetectedVersion == null) {
        throw new GradleException('Unable to determine FullStory version, please verify your root build file is properly configured')
    }

    def versionRegex = /(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)/
    def match = fsDetectedVersion =~ versionRegex
    if (match.matches()) {
        def major = match.group('major') as Integer
        def minor = match.group('minor') as Integer
        if (major < 1 || (major == 1 && minor < 54)) {
            throw new GradleException("FullStory SDK version 1.54.0 or later is required, but version $fsDetectedVersion was detected. Please update to a newer version of FullStory.")
        }
    } else {
        throw new GradleException('Unable to determine FullStory version, please verify your root build file is properly configured')
    }


    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")
        implementation "com.fullstory:instrumentation-full:$fsDetectedVersion@aar" //e.g. 1.53.0@aar'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
